/**
 * 给定两个数组，编写一个函数来计算它们的交集。
 * 示例 1：
输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]

示例 2:
输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]

说明：
输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。
我们可以不考虑输出结果的顺序。
 * 
 */

/**
 * 解法：这个取交集需要保留重复元素，可以是用双指针来解答，具体思路和代码如下

如果两个数组是有序的，则可以使用双指针的方法得到两个数组的交集。

首先对两个数组进行排序，然后使用两个指针遍历两个数组。

初始时，两个指针分别指向两个数组的头部。每次比较两个指针指向的两个数组中的数字，如果两个数字不相等，则将指向较小数字的指针右移一位，

如果两个数字相等，将该数字添加到答案，并将两个指针都右移一位。当至少有一个指针超出数组范围时，遍历结束
 * 
 */
function commonInArray(arr1: number[], arr2: number[]) {
  let l1 = 0;
  let l2 = 0;
  let res = [];

  arr1 = arr1.sort((a, b) => a - b);
  arr2 = arr2.sort((a, b) => a - b);

  while(l1 < arr1.length && l2 < arr2.length) {
    if (arr1[l1] === arr2[l2]) {
      res.push(arr1[l1]);
      l1++;
      l2++;
    }
    if (arr1[l1] < arr2[l2]) {
      l1++;
    }
    if (arr1[l1] > arr2[l2]) {
      l2++;
    }
  }

  return res;
}