/**
 * 题目如下：
编写一个算法来判断一个数 n 是不是快乐数。
「快乐数」定义为：

对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
如果 可以变为  1，那么这个数就是快乐数。
如果 n 是快乐数就返回 true ；不是，则返回 false 。

输入：n = 19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

输入：n = 2
输出：false
 */
/**
 * 思路：就是不能有环，有环的话就到不了1了
 * 
创建一个慢指针，一次走一步，再创建一个快指针，一次走两步。
当快慢指针相遇，代表形参环路，该数不是快乐数。
若指针移动过程中，找到了 11，则当前数是一个快乐数
 */

function getNext(n) {
  return n.toString().split('').map(i => i ** 2).reduce((a, b) => a + b);
}

function isHappy(n) {
  const map = {};
  while(n !== 1) {
    if (map[n]) return false;
    map[n] = true;
    n = getNext(n);
  }
  return true;
}