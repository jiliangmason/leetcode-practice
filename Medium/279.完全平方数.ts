/**
 * 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。
例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4

输入：n = 13
输出：2
解释：13 = 4 + 9
 */
var numSquares = function (n) {
  /**
   * 背包问题，
   * 包是平方数n  物品是构成它的平方数
   * 循环方式：外背包内物品
   */
  let dp = new Array(n + 1).fill(0);
  dp[0] = 0;
  for (let i = 1; i < n; i++) {
    for (let j = 1; i - j * j >= 0; j++) {
      /**
       * dp[i]: 构成i的平方数最少的个数
       * dp[i - j*j] + 1中的dp[i - j*j] 代表了由平方数i减去平方数j这一组
       * 剩下的平方数们 再加1 相当于又加回来了 还是dp[i]
       * 但是此时需要比一下dp[i]和dp[i - j * j] + 1的大小取小的那个
       */
      dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
    }
  }
  return dp[n];
};
